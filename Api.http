ignore ---
@BASE_URI=http://localhost:5025

# Use a valid JWT token for mutation requests as an Admin or User
@JWT_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI4IiwiZW1haWwiOiJhZG1pbkBleGFtcGxlLmNvbSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkFkbWluIiwiZmlyc3ROYW1lIjoiQWRtaW4iLCJsYXN0TmFtZSI6IlVzZXIiLCJhZ2UiOiIzMCIsImV4cCI6MTc1OTA3Mzk5OSwiaXNzIjoiSG90ZWxCb29raW5nQXBpIiwiYXVkIjoiSG90ZWxCb29raW5nQXBpVXNlcnMifQ.TjXGZ0TtUk0GBStffBQiownSUtn3iH7Hg7jGzjxKHnU

### Health check

GET {{BASE_URI}}/health
Accept: application/json

### Get all users (Admin only)

GET {{BASE_URI}}/api/v1/users
Accept: application/json
Authorization: Bearer {{JWT_TOKEN}}

### Register a new user

POST {{BASE_URI}}/api/v1/auth/register
Accept: application/json
Content-Type: application/json

{
    "firstName": "Test",
    "lastName": "User",
    "email": "testuser@example.com",
    "age": 22,
    "password": "testpass",
    "role": "User"
}

### Login (get JWT token)

POST {{BASE_URI}}/api/v1/auth/login
Accept: application/json
Content-Type: application/json

{
    "email": "testuser@example.com",
    "password": "testpass"
}

### Register a new admin user

POST {{BASE_URI}}/api/v1/auth/register
Accept: application/json
Content-Type: application/json

{
    "firstName": "Admin",
    "lastName": "User",
    "email": "admin@example.com",
    "age": 30,
    "password": "adminpass",
    "role": "Admin"
}

### Login as admin (get JWT token)

POST {{BASE_URI}}/api/v1/auth/login
Accept: application/json
Content-Type: application/json

{
    "email": "admin@example.com",
    "password": "adminpass"
}

### Get all room types (public)

GET {{BASE_URI}}/api/v1/roomtypes
Accept: application/json

### Create a new room type (Admin only, user must be active)

POST {{BASE_URI}}/api/v1/roomtypes
Accept: application/json
Content-Type: application/json
Authorization: Bearer {{JWT_TOKEN}}

{
    "name": "Deluxe",
    "description": "Deluxe room with premium features"
}

### Update a room type (Admin only, user must be active)

PUT {{BASE_URI}}/api/v1/roomtypes/1
Accept: application/json
Content-Type: application/json
Authorization: Bearer {{JWT_TOKEN}}

{
    "id": 1,
    "name": "Single Updated",
    "description": "Updated description for single room"
}

### Patch a room type (Admin only, user must be active)

PATCH {{BASE_URI}}/api/v1/roomtypes/1
Accept: application/json
Content-Type: application/json
Authorization: Bearer {{JWT_TOKEN}}

{
    "name": "Patched Room Name"
}

### Delete a room type (Admin only, user must be active)

DELETE {{BASE_URI}}/api/v1/roomtypes/1
Accept: application/json
Authorization: Bearer {{JWT_TOKEN}}

### Get all rooms
GET {{BASE_URI}}/api/v1/rooms
Accept: application/json

### Create a new room (Admin only)
# Note: amenities must be a comma-separated string, not an array
POST {{BASE_URI}}/api/v1/rooms
Accept: application/json
Content-Type: application/json
Authorization: Bearer {{JWT_TOKEN}}

{
    "roomTypeId": 1,
    "roomNumber": 101,
    "pricePerNight": 250.00,
    "capacity": 2,
    "bedType": "King Bed",
    "size": "65 sq m",
    "floor": 1,
    "status": "available",
    "amenities": "Balcony,King Bed,Mini Bar,City View,WiFi,Air Conditioning"
}

### Patch a room (Admin only)
PATCH {{BASE_URI}}/api/v1/rooms/1
Accept: application/json
Content-Type: application/json
Authorization: Bearer {{JWT_TOKEN}}

{
    "status": "maintenance",
    "pricePerNight": 300.00
}

### Delete a room (Admin only)
DELETE {{BASE_URI}}/api/v1/rooms/1
Accept: application/json
Authorization: Bearer {{JWT_TOKEN}}

### Get all galleries
GET {{BASE_URI}}/api/v1/galleries
Accept: application/json

### Get gallery by id
GET {{BASE_URI}}/api/v1/galleries/1
Accept: application/json

### Create a new gallery (Admin only)
POST {{BASE_URI}}/api/v1/galleries
Accept: application/json
Content-Type: application/json
Authorization: Bearer {{JWT_TOKEN}}

{
    "roomId": 2,
    "title": "Room Overview - Main Living Area",
    "img": "https://images.unsplash.com/photo-1631049307264-da0ec9d70304?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "alt": "Main living area overview"
}

### Update a gallery (Admin only)
PUT {{BASE_URI}}/api/v1/galleries/1
Accept: application/json
Content-Type: application/json
Authorization: Bearer {{JWT_TOKEN}}

{
    "id": 1,
    "roomId": 1,
    "title": "Updated Title",
    "img": "https://images.unsplash.com/photo-1631049307264-da0ec9d70304?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "alt": "Updated alt text"
}

### Delete a gallery (Admin only)
DELETE {{BASE_URI}}/api/v1/galleries/1
Accept: application/json
Authorization: Bearer {{JWT_TOKEN}}

### Get all bookings
GET {{BASE_URI}}/api/v1/bookings
Accept: application/json

### Get booking by id
GET {{BASE_URI}}/api/v1/bookings/1
Accept: application/json

### Create a new booking (User or Admin)
POST {{BASE_URI}}/api/v1/bookings
Accept: application/json
Content-Type: application/json
Authorization: Bearer {{JWT_TOKEN}}

{
    "userId": 1,
    "roomId": 2,
    "startDate": "2025-10-01T14:00:00Z",
    "endDate": "2025-10-05T12:00:00Z",
    "status": "Reserved",
    "totalPrice": 500.00,
    "notes": "Late check-in requested"
}

### Update a booking (User or Admin)
PUT {{BASE_URI}}/api/v1/bookings/1
Accept: application/json
Content-Type: application/json
Authorization: Bearer {{JWT_TOKEN}}

{
    "id": 1,
    "userId": 1,
    "roomId": 2,
    "startDate": "2025-10-01T14:00:00Z",
    "endDate": "2025-10-05T12:00:00Z",
    "status": "Confirmed",
    "totalPrice": 500.00,
    "notes": "Updated notes"
}

### Patch a booking (User or Admin)
PATCH {{BASE_URI}}/api/v1/bookings/1
Accept: application/json
Content-Type: application/json-patch+json
Authorization: Bearer {{JWT_TOKEN}}

[
    { "op": "replace", "path": "/status", "value": "CheckedIn" },
    { "op": "replace", "path": "/notes", "value": "Arrived early" }
]

### Check out a booking (User or Admin)
PATCH {{BASE_URI}}/api/v1/bookings/1
Accept: application/json
Content-Type: application/json-patch+json
Authorization: Bearer {{JWT_TOKEN}}

[
    { "op": "replace", "path": "/status", "value": "CheckedOut" }
]

### Get bookings by user id
GET {{BASE_URI}}/api/v1/bookings/by-user/1
Accept: application/json

### Delete a booking (Admin only)
DELETE {{BASE_URI}}/api/v1/bookings/1
Accept: application/json
Authorization: Bearer {{JWT_TOKEN}}

### Get all rooms (showing occupancy)
GET {{BASE_URI}}/api/v1/rooms
Accept: application/json
# Response includes: OccupiedByUserId (user ID of occupant, null if vacant)

### Get all users (showing CurrentRoomId)
GET {{BASE_URI}}/api/v1/users
Accept: application/json
Authorization: Bearer {{JWT_TOKEN}}
# Response includes: CurrentRoomId (room ID user is occupying, null if none)